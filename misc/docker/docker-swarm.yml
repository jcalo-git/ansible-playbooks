---
- name: Install Docker and set up a Docker Swarm cluster
  hosts: "{{ target_hosts }}"
  become: yes
  vars:
    docker_apt_key_url: https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg
    docker_apt_repo: "deb [arch={{ ansible_architecture }}] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    swarm_manager: "{{ groups['manager'][0] }}"
  vars_prompt:
    - name: "docker_user"
      prompt: "Grant privileges to docker user"
      private: false
    - name: "target_hosts"
      prompt: "which hosts"
      private: false
  tasks:
    - name: Install required packages
      ansible.builtin.apt:
        name: 
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      ansible.builtin.apt_key:
        url: "{{ docker_apt_key_url }}"
        state: present

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "{{ docker_apt_repo }}"
        state: present

    - name: Install Docker
      ansible.builtin.apt:
        name: docker.io
        state: latest

    - name: Ensure Docker service is running
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add a user to the docker group
      user:
        name: "{{ docker_user }}"
        groups: docker
        append: yes

    - name: Set swarm_manager fact for all hosts
      ansible.builtin.set_fact:
        swarm_manager: "{{ groups['manager'][0] }}"

- name: Initialize Docker Swarm on the manager node
  hosts: manager
  become: yes
  tasks:
    - name: Initialize Docker Swarm
      ansible.builtin.command:
        cmd: docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}
      register: swarm_init_result
      failed_when: "'This node is already part of a swarm' not in swarm_init_result.stderr"

    - name: Get manager join-token
      ansible.builtin.command:
        cmd: docker swarm join-token -q manager
      register: manager_token_output

    - name: Set manager token as fact
      ansible.builtin.set_fact:
        manager_token: "{{ manager_token_output.stdout }}"

    - name: Get worker join-token
      ansible.builtin.command:
        cmd: docker swarm join-token -q worker
      register: worker_token_output

    - name: Set worker token as fact
      ansible.builtin.set_fact:
        worker_token: "{{ worker_token_output.stdout }}"

- name: Join worker nodes to the Docker Swarm cluster
  hosts: workers
  become: yes
  tasks:
    - name: Join the swarm as a worker
      ansible.builtin.command:
        cmd: docker swarm join --token {{ hostvars[swarm_manager].worker_token }} {{ hostvars[swarm_manager].ansible_default_ipv4.address }}:2377

- name: Display Docker Swarm status
  hosts: manager
  become: yes
  tasks:
    - name: Display Swarm join status
      ansible.builtin.command:
        cmd: docker node ls
      register: swarm_status

    - name: Show Swarm status
      ansible.builtin.debug:
        msg: "{{ swarm_status.stdout }}"
